#!/bin/bash

set -eu -o pipefail


printlnErr() {
	# Using printf prevents echo from mangling any unusual filename characters
	printf "%s\n" "$1" >&2
}

# Show help if no command is provided
if [ "$#" -ne "1" ]; then
	printlnErr "$(basename "$0") invokes a bash command line inside the container.  The container will be started if required."
	printlnErr "A mount point is mounted inside the container as /w/"
	printlnErr "If available this will be the oldest ancestor gopath, which will be injected into the containers environment variables."
	printlnErr "If no gopath can be deduced then the mount point will be the current working directory will be used as the mount point"
	printlnErr "Ensure that any other environment variables (including overriding the injected gopath) are specified in the command line."
	printlnErr "The command will be executed from the equivalent position inside the container."
	printlnErr ""
	printlnErr "Invocation: $(basename "$0") _command_line_"
	printlnErr ""
	exit 1
fi

# Get the container name from the name of this script (as updated by dockerfiles-build)
containerName="$(printf "%s" "$(basename "$0")" | sed 's:^run-::')"

# Find the highest directory level golang directory structute
mntpoint="$(printf "%s" "$(pwd)/src/" | sed 's:/src/.*::')"
injectgopath="yes"
if [ ! -d "$mntpoint/src" ]; then
	printlnErr "No gopath found; not automattically setting GOPATH variable"
	injectgopath=""
fi

# If the container exists and doesn't have -v "$mntpoint:/w" then stop and remove it
priorContainerId="$(docker ps --format "{{.ID}}" --no-trunc --filter "name=$containerName")"
if [ -n "$priorContainerId" ]; then
	priorContainerMounts="$(docker ps --format "{{.Mounts}}" --no-trunc --filter "name=$containerName")"
	if [ "$priorContainerMounts" != "$mntpoint" ]; then
		# Container exists and does not have the correct path mounted; ensure it is removed promptly
		docker rm -f "$priorContainerId" 1>/dev/null
	fi
fi

# Ensure the container is running, mounting the mntpoint as /w/ - requires the github.com/RidiculousRichard/bash-dev-scripts to be on your path
# git clone https://github.com/RidiculousRichard/bash-dev-scripts.git
containerId="$(docker-run-image "$(dirname $0)/$containerName"*".save.xz" "$containerName" -d --rm -v "$mntpoint:/w:z")"
printlnErr "The host directory $mntpoint is mounted within the container as /w"

# Exec a command inside the container
workingDirectory="/w/$(realpath  --relative-to="$mntpoint" "$(pwd)")"
if [ -n "$injectgopath" ]; then
	docker exec -it "$containerId" /bin/bash -ic "cd \"$workingDirectory\"; export GOPATH=\"/w$mntpoint\"; $@"
else
	docker exec -it "$containerId" /bin/bash -ic "cd \"$workingDirectory\"; $@"
fi
